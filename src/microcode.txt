# MIT License
# -----------------------------------------------------------------------------
# Copyright (c) 2021 Dominic Beesley https://github.com/dominicbeesley
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# -----------------------------------------------------------------------------


# Microcode file for a SC/MP
#


# NEXTPC is usally a relative step to the next line. the microcode can jump
# to other lines by setting this section attribute to a value other than 1
# a value of 'd0 is special and will alway force a jump to the first line of
# micrcode
# NOTE: if a line of microcode is "skipped" due to a condition match then
# the NEXTPC value is ignored and the next microcode line is executed next.
SECTION:NEXTPC,SIGNED,8
	NEXT='d1*			# normal operation go to next line
	FETCH='d0			# go to microcode line 0 == FETCH




#MAKE SURE THE TWO FOLLOWING SECTIONS MATCH!
#SECTIONS COND_MASK and COND_XOR are applied to a set of bits
#
#	assign cond_in = { op[7], op[2:0], c_jmp };
#
#	assign	c_jmp =
#		(op[3:2] == 2'b01)?~neg:		//jp i.e. !neg
#		(op[3:2] == 2'b10)?zer:		//jz
#		(op[3:2] == 2'b11)?~zer:
#		1'b1;				//always jmp
#
#	assign cond =| ((cond_in ^ mcode.cond_xor) & mcode.cond_mask);
#
# If cond is true then NEXTPC value on the current line is ignored when CTL=COND_JUMP
# and effectively replaced with 'd1
# If cond is true and CTL=COND_LD then LD_L is ignored (as if it was all 0's)

SECTION:COND_MASK,BITMAP,10
	NUL=NUL*
	OP2=		'b1000000000
	ADI=		'b0111000000			# ADI tests for immediate operations on bits 2:0 of the opcode
	JMP=		'b0000100000
	POSTINC=	'b0000010000
	RDL80=		'b0000001000
	NOTCARRY=	'b0000000100
	NOTHALFCARRY=	'b0000000010
	ALUCARRY=	'b0000000001
SECTION:COND_XOR,BITMAP,10
	NUL=NUL*
	OP2=		'b0000000000
	ADI=		'b0100000000			# ADI tests for immediate operations on bits 2:0 of the opcode
	JMP=		'b0000000000
	POSTINC=	'b0000010000			# JUMP if POSTINC
	POSTINCNEG=	'b0000000000			# JUMP if !POSTINC
	RDL80=		'b0000000000			# JUMP IF RD_L=0x80
	NOTCARRY=	'b0000000100
	NOTHALFCARRY=	'b0000000010
	ALUCARRY=	'b0000000000

SECTION:BUS,BITMAP,7
	NUL=NUL*
	WR
	RD
	ADS
	FLG_R
	FLG_I
	FLG_D				# (gated by this opcode actually being a delay)
	FLG_H
	ADSOP=ADS|FLG_R|FLG_I
	ADSRD=ADS|FLG_R
	ADSWR=ADS
	ADSHALT=ADS|FLG_R|FLG_H
	ADSRDOP2=ADS|FLG_R|FLG_D

SECTION:LD_L,BITMAP,15
	NUL=NUL*			# Load nothing from low read bus
	P0				# Load P0 low from low read bus
	P1
	P2
	P3
	ADDR
	ACC
	EXT
	STATUS
	D
	OP
	ST_CY
	ST_OV
	EA				# Load P0..3 depending on bits in op[1:0]
	EAM				# Load P0..3 depending on bits in op[1:0] only if op[2] == 'b1
	SOUT
	ADDR_PC=P0|ADDR
	D_ACC=D|ACC
	ACC_STAT_CYOV=ACC|ST_CY|ST_OV
	ACC_STAT_CY=ACC|ST_CY
	D_ACC_STAT_CY=D|ACC|ST_CY
	EAM_ADDR=EAM|ADDR
	EXT_SOUT=EXT|SOUT
SECTION:LD_H,BITMAP,7
	NUL=NUL*
	P0
	P1
	P2
	P3
	ADDR
	EA				# Load P0..3 depending on bits in op[1:0]
	EAM				# Load P0..3 depending on bits in op[1:0] only if op[2] == 'b1
	ADDR_PC=P0|ADDR
	EAM_ADDR=EAM|ADDR
SECTION:RD_L,ONEHOT,14
	P0*
	P1
	P2
	P3
	ADDR
	ACC
	EXT
	STATUS
	D
	EA
	CONST_66
	CONST_FA
	CONST_A0
	CONST_FF
SECTION:RD_H,ONEHOT,6
	P0*
	P1
	P2
	P3
	ADDR
	EA
SECTION:WR_L,ONEHOT,3
	RD_H
	RD_L*
	ALU
SECTION:WR_H,ONEHOT,3
	RD_H*
	RD_L
	INCR4
SECTION:ALU_OP,INDEX,3
	NUL=	'b000*
	RRL=	'b001

	# AND, OR, XOR need to be the same as {1'b0, op[5:3]}
	AND=	'b010
	OR=	'b011
	XOR=	'b100

	INC=	'b101
	DEC=	'b110

	ADD=	'b111

SECTION:ALU_CY_IN,INDEX,2
	STATUS=	'b00*
	ZERO=	'b01
	SIN=	'b10
	RD0=	'b11

SECTION:CTL,BITMAP,8
	NUL=NUL*
	DECODE
	LOGICOP
	RET
	CALL
	COND_JMP
	COND_LD
	CYOP0
	IEOP0

CODESTART=7

#NOTE: FETCH MUST be the first line!
RESET:
FETCH:		LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=P0, RD_H=P0, WR_L=ALU, WR_H=INCR4, ALU_OP=INC
		BUS=ADSOP
		NEXTPC=@DECODE, COND_MASK=OP2, COND_XOR=OP2, CTL=COND_JMP, BUS=RD, LD_L=OP
		LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=P0, RD_H=P0, WR_L=ALU, WR_H=INCR4, ALU_OP=INC
		BUS=ADSRDOP2
		BUS=RD, LD_L=D
DECODE:		CTL=DECODE #decode step will jump to the instruction see scmp_microcode_oppc.sv


# all loads lead to here and also all logical ops
LD:		NEXTPC=@LDI, COND_MASK=ADI, COND_XOR=ADI, CTL=COND_JMP		# test for LDI
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
LDI:		NEXTPC=FETCH, WR_L=ALU, RD_L=ACC, LD_L=ACC, CTL=LOGICOP
LDE:		NEXTPC=@LDI, RD_L=EXT, WR_L=RD_L, LD_L=D

ADD:		NEXTPC=@ADI, COND_MASK=ADI, COND_XOR=ADI, CTL=COND_JMP		# test for ADI
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
ADI:		NEXTPC=FETCH, WR_L=ALU, RD_L=ACC, LD_L=ACC_STAT_CYOV, ALU_OP=ADD
ADE:		NEXTPC=@ADI, RD_L=EXT, WR_L=RD_L, LD_L=D

CAD:		NEXTPC=@CAI, COND_MASK=ADI, COND_XOR=ADI, CTL=COND_JMP		# test for ADI
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
CAI:		RD_L=CONST_FF, WR_L=ALU, ALU_OP=XOR, LD_L=D			# complement D
		NEXTPC=FETCH, WR_L=ALU, RD_L=ACC, LD_L=ACC_STAT_CYOV, ALU_OP=ADD
CAE:		NEXTPC=@CAI, RD_L=EXT, WR_L=RD_L, LD_L=D

# decimal add
DAD:		NEXTPC=@DAI, COND_MASK=ADI, COND_XOR=ADI, CTL=COND_JMP		# test for DAI
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
DAI:		LD_L=D, WR_L=ALU, RD_L=CONST_66, ALU_OP=ADD, ALU_CY_IN=ZERO		# add hex 66
		WR_L=ALU, RD_L=ACC, LD_L=D_ACC_STAT_CY, ALU_OP=ADD		# do the main add : Cy,HCy,A/D <= A + D + 66 + Cy
		COND_MASK=NOTHALFCARRY, COND_XOR=NOTHALFCARRY, ALU_OP=ADD, ALU_CY_IN=ZERO, CTL=COND_LD, RD_L=CONST_FA, LD_L=D_ACC, WR_L=ALU		# decimal adjust low nyb
		NEXTPC=@FETCH, COND_MASK=NOTCARRY, COND_XOR=NOTCARRY, ALU_OP=ADD, ALU_CY_IN=ZERO, CTL=COND_LD, RD_L=CONST_A0, LD_L=ACC, WR_L=ALU	# decimal adjust hi nyb
DAE:		NEXTPC=@DAI, RD_L=EXT, WR_L=RD_L, LD_L=D

#TODO-FIX EA to use 4 bit ALU / ADD
EA:		RD_L=EXT, LD_L=D, WR_L=RD_L, COND_MASK=RDL80, COND_XOR=RDL80, CTL=COND_LD			# if D=0x80 then replace with EXT
		NEXTPC=@EAPOSTINC1, RD_L=D, COND_MASK=POSTINC, COND_XOR=POSTINC, CTL=COND_JMP			# if op[2]='1' and +ve displacement do POSTINC
EAR2:		LD_L=EAM_ADDR, LD_H=EAM_ADDR, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD, ALU_CY_IN=ZERO# set address and EA if op[2] set
		CTL=RET												# DEAD CYCLE to match postinc
EAPOSTINC1:	LD_L=ADDR, LD_H=ADDR, RD_L=EA, RD_H=EA, WR_L=RD_L, WR_H=RD_H					# set ADDR
		CTL=RET,LD_L=EA, LD_H=EA, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD, ALU_CY_IN=ZERO	# update register separately



ST:		NEXTPC=NEXT										# DEAD cycle
		NEXTPC=@EA, CTL=CALL
		BUS=ADSWR, WR_L=RD_L, LD_L=D, RD_L=ACC
		BUS=WR, NEXTPC=FETCH

DLD:
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
		LD_L=D_ACC, RD_L=D
		BUS=ADSWR, WR_L=ALU, LD_L=D_ACC, RD_L=ACC, ALU_OP=DEC
		BUS=WR, NEXTPC=FETCH
ILD:
		NEXTPC=@EA, CTL=CALL
		BUS=ADSRD
		BUS=RD, LD_L=D
		LD_L=D_ACC, RD_L=D
		BUS=ADSWR, WR_L=ALU, LD_L=D_ACC, RD_L=ACC, ALU_OP=INC
		BUS=WR, NEXTPC=FETCH
JMP:
	NEXTPC=FETCH, RD_L=ACC, COND_MASK=JMP, COND_XOR=JMP, CTL=COND_JMP
	NEXTPC=FETCH, LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD, ALU_CY_IN=ZERO

XAE:
	WR_L=RD_L, LD_L=D, RD_L=ACC
	WR_L=RD_L, LD_L=ACC, RD_L=EXT
	NEXTPC=FETCH, WR_L=RD_L, LD_L=EXT, RD_L=D

XPAL:	WR_L=RD_L, LD_L=D, RD_L=ACC
	WR_L=RD_L, LD_L=ACC, RD_L=EA
	WR_L=RD_L, LD_L=EA, RD_L=D
	NEXTPC=FETCH

XPAH:	WR_L=RD_L, LD_L=D, RD_L=ACC						# D <= ACC
	WR_L=RD_H, LD_L=ACC, RD_H=EA						# ACC <= EA(H)
	WR_H=RD_L, LD_H=EA, RD_L=D						# EA(H) <= D
	NEXTPC=FETCH

XPPC:	RD_L=EA, WR_L=RD_L, LD_L=P0, RD_H=EA, WR_H=RD_H, LD_H=P0		# P0(HL)<=EA(HL)
	RD_L=ADDR, WR_L=RD_L, LD_L=EA, RD_H=ADDR, WR_H=RD_H, LD_H=EA		# EA<=ADDR(HL)
	NEXTPC=FETCH


DLY:	NEXTPC=NEXT
	NEXTPC=@DLY, RD_L=ACC, WR_L=ALU, LD_L=ACC, ALU_OP=DEC, COND_MASK=ALUCARRY, COND_XOR=ALUCARRY, CTL=COND_JMP
	NEXTPC=NEXT
	NEXTPC=@DLY, RD_L=D, WR_L=ALU, LD_L=D, ALU_OP=DEC, COND_MASK=ALUCARRY, COND_XOR=ALUCARRY, CTL=COND_JMP
	NEXTPC=NEXT
	NEXTPC=FETCH

_CL:	NEXTPC=FETCH, CTL=CYOP0

_IE:	CTL=IEOP0
	NEXTPC=FETCH

CSA:	NEXTPC=FETCH, WR_L=RD_L, RD_L=STATUS, LD_L=ACC

CAS:	RD_L=ACC, WR_L=RD_L, LD_L=STATUS
	NEXTPC=FETCH

NOP:	NEXTPC=FETCH

HALT:	BUS=ADSHALT
	BUS=RD
	NEXTPC=FETCH

SIO:	NEXTPC=FETCH, ALU_CY_IN=SIN, ALU_OP=RRL, RD_L=EXT, WR_L=ALU, LD_L=EXT_SOUT
SR:	NEXTPC=FETCH, ALU_CY_IN=ZERO, ALU_OP=RRL, RD_L=ACC, WR_L=ALU, LD_L=ACC
SRL:	NEXTPC=FETCH, ALU_CY_IN=STATUS, ALU_OP=RRL, RD_L=ACC, WR_L=ALU, LD_L=ACC
RR:	NEXTPC=FETCH, ALU_CY_IN=RD0, ALU_OP=RRL, RD_L=ACC, WR_L=ALU, LD_L=ACC
RRL:	NEXTPC=FETCH, ALU_CY_IN=STATUS, ALU_OP=RRL, RD_L=ACC, WR_L=ALU, LD_L=ACC_STAT_CY


#TODO
# For PC-relative, indexed and auto-indexed memory reference instructions is that the contents of the extension register are # substituted for the displacement if the instruction displace equals -128!#
# AUTO indexed
# AUTO indexed -ve before, +ve after!
